1. React Life cycle methods. Depricated react methods.
2. React Pure Component with example.
3. passing data/props from child to parent component example.
4. React router with example.
5. React context- API.
6. React Hooks.
----------------------------------------------------------
7. React HOC.
Ans : -
function wrapWithUser(UserInfo) {
  const secretUserInfo = {
    name: 'Jack Franklin'
  };
 
  return function(props) {
    return <UserInfo user={secretUserInfo}/>
  }
}

const AppHeader = function(props) {
  if (props.user) {
    return <p>Logged in as {props.user.name}</p>;
  } else {
    return <p>You need to login."</p>;
  }
};

const ConnectedAppHeader = wrapWithUser(AppHeader);

ReactDOM.render(<ConnectedAppHeader />, document.getElementById('root'));

--------------------------------------------------------------------
8. Why React is Fast? Some React Advantages.
9. How many ways we can pass data between react components.
10. React controlled Vs un-controlled components.
11. React two way binding ? Or only one way Binding with example.
12. React Error handling or Error Boundary.
13. React Lazy Loading?
14. what is default props?
Ans :-
function ThemedButton(props) {
  // ...render component
}

// Set default props
ThemedButton.defaultProps = {
  theme: "secondary",
  label: "Button Text"
};
------------------------------------------------------------
15. What is propType in React?
Ans -
Javascript is not a strongly typed language. Javascript functions are happy to accept data of different types.
PropTypes is a library that helps in minimizing this problem in React by checking the types passed in the props.
import PropTypes from 'prop-types'; 
class Greeting extends React. Component { 
  render() { 
    return ( <h1>Hello, {this.props.name}</h1> );
  } 
  Greeting. propTypes = { name: PropTypes}
-----------------------------------------------------------
16. Side Effect in React?
Ans -
Anything outside the scope of the function.
Like
  API/Ajax call
  call to authentication service
  Error tracking calls.

-------------------------------------------
import React, { useState } from "react";
import "./styles.css";

export default function App() {
  const [count, setCount] = useState(0);

  const handleClick = () => {
    setCount(count + 1);
  };
  const handleReset = () => {
    setCount(0);
  };

  return (
    <div className="App">
      <h1>You've clicked the button {count} times.</h1>
      <button onClick={handleClick}>Click me!</button>
      <button onClick={handleReset}>Reset</button>
    </div>
  );
}
---------------------------------------------
React Counter with Redux
https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/counter?file=/src/index.js 
---------------------------------------------
Counter Using Class Component-

import React from 'react'
import { render } from 'react-dom'

const CounterBtn = props => {
  return (<button className="btn"  onClick={props.onClick}>{props.children}</button>);
}
class App extends React.Component {
   constructor( props ) {
     super( props );
      this.state = {
        counter: 0,
      };
   }

   incrementCounter = () => {
     this.setState({ 
       counter: this.state.counter + 1 
      })
   }
   decrementCounter = () => {
     this.setState({
       counter:  this.state.counter - 1
      })
   }
   resetCounter = () => {
     this.setState({ counter: 0 })
   }
   render(){
     return <div className="main-content">
        <CounterBtn onClick={this.incrementCounter}>+</CounterBtn>
        <span className="counter-text">{this.state.counter}</span>
        <CounterBtn onClick={this.decrementCounter}>-</CounterBtn>
        <CounterBtn onClick={this.resetCounter}>Reset</CounterBtn>
        </div>
   }
}

render(<App />, document.getElementById('root'))
-----------------------------------------
